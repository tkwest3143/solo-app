// Temporary stub file for settings_model.freezed.dart
// This file should be generated by build_runner

import 'package:flutter/material.dart';

// Stub implementation for _$AppSettings
abstract class _$AppSettings {
  ThemeMode get themeMode;
  int get defaultWorkMinutes;
  int get defaultShortBreakMinutes;
  int get defaultLongBreakMinutes;
  int get defaultCyclesUntilLongBreak;
  bool get todoDueDateNotificationsEnabled;
  bool get pomodoroCompletionNotificationsEnabled;
  bool get countUpTimerNotificationsEnabled;
  bool get todoDeadlineRemindersEnabled;
  bool get appUpdateNotificationsEnabled;
  int get countUpNotificationMinutes;

  _$AppSettings copyWith({
    ThemeMode? themeMode,
    int? defaultWorkMinutes,
    int? defaultShortBreakMinutes,
    int? defaultLongBreakMinutes,
    int? defaultCyclesUntilLongBreak,
    bool? todoDueDateNotificationsEnabled,
    bool? pomodoroCompletionNotificationsEnabled,
    bool? countUpTimerNotificationsEnabled,
    bool? todoDeadlineRemindersEnabled,
    bool? appUpdateNotificationsEnabled,
    int? countUpNotificationMinutes,
  });
}

// Stub implementation for _AppSettings
class _AppSettings implements _$AppSettings {
  @override
  final ThemeMode themeMode;
  @override
  final int defaultWorkMinutes;
  @override
  final int defaultShortBreakMinutes;
  @override
  final int defaultLongBreakMinutes;
  @override
  final int defaultCyclesUntilLongBreak;
  @override
  final bool todoDueDateNotificationsEnabled;
  @override
  final bool pomodoroCompletionNotificationsEnabled;
  @override
  final bool countUpTimerNotificationsEnabled;
  @override
  final bool todoDeadlineRemindersEnabled;
  @override
  final bool appUpdateNotificationsEnabled;
  @override
  final int countUpNotificationMinutes;

  const _AppSettings({
    required this.themeMode,
    required this.defaultWorkMinutes,
    required this.defaultShortBreakMinutes,
    required this.defaultLongBreakMinutes,
    required this.defaultCyclesUntilLongBreak,
    required this.todoDueDateNotificationsEnabled,
    required this.pomodoroCompletionNotificationsEnabled,
    required this.countUpTimerNotificationsEnabled,
    required this.todoDeadlineRemindersEnabled,
    required this.appUpdateNotificationsEnabled,
    required this.countUpNotificationMinutes,
  });

  @override
  _AppSettings copyWith({
    ThemeMode? themeMode,
    int? defaultWorkMinutes,
    int? defaultShortBreakMinutes,
    int? defaultLongBreakMinutes,
    int? defaultCyclesUntilLongBreak,
    bool? todoDueDateNotificationsEnabled,
    bool? pomodoroCompletionNotificationsEnabled,
    bool? countUpTimerNotificationsEnabled,
    bool? todoDeadlineRemindersEnabled,
    bool? appUpdateNotificationsEnabled,
    int? countUpNotificationMinutes,
  }) {
    return _AppSettings(
      themeMode: themeMode ?? this.themeMode,
      defaultWorkMinutes: defaultWorkMinutes ?? this.defaultWorkMinutes,
      defaultShortBreakMinutes: defaultShortBreakMinutes ?? this.defaultShortBreakMinutes,
      defaultLongBreakMinutes: defaultLongBreakMinutes ?? this.defaultLongBreakMinutes,
      defaultCyclesUntilLongBreak: defaultCyclesUntilLongBreak ?? this.defaultCyclesUntilLongBreak,
      todoDueDateNotificationsEnabled: todoDueDateNotificationsEnabled ?? this.todoDueDateNotificationsEnabled,
      pomodoroCompletionNotificationsEnabled: pomodoroCompletionNotificationsEnabled ?? this.pomodoroCompletionNotificationsEnabled,
      countUpTimerNotificationsEnabled: countUpTimerNotificationsEnabled ?? this.countUpTimerNotificationsEnabled,
      todoDeadlineRemindersEnabled: todoDeadlineRemindersEnabled ?? this.todoDeadlineRemindersEnabled,
      appUpdateNotificationsEnabled: appUpdateNotificationsEnabled ?? this.appUpdateNotificationsEnabled,
      countUpNotificationMinutes: countUpNotificationMinutes ?? this.countUpNotificationMinutes,
    );
  }
}